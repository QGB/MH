//		KeyListener keyEnter=new KeyListener() {
//			@Override
//			public void keyTyped(KeyEvent e) {}
//			@Override
//			public void keyReleased(KeyEvent e) {
//
//			}
//			@Override
//			public void keyPressed(KeyEvent e) {}
//		}; 
		//CBInput.getEditor().getEditorComponent().addKeyListener(keyEnter);
		//CBInput.addKeyListener(keyEnter);
		
		
		
				Runnable run=new Runnable() {
			public void run() {
				//for (int i = 0; i <99; i++) {
					gPP.showMsg(gstMsg+" "+T.getCurrentTime());
				//}
			}
		};
		Thread t=new Thread(run);
		t.start();
		
		WindowListener l = new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				System.exit(0);
			}

			public void windowDeiconified(WindowEvent e) {
			}

			public void windowIconified(WindowEvent e) {
			}
		};
		addWindowListener(l);

KSoftMT<Entry> kscall = new KSoftMT<Entry>(gsrp);
		ExecutorService exec = Executors.newCachedThreadPool();
		Future<Entry> fe = exec.submit(kscall);
		try {
			T.print();
			T.print(T.time());
			while (fe.isDone()==false) {
				T.sleep(444);
				fe.cancel(true);
				T.print("isD=%s,isC=%s",fe.isDone(),fe.isCancelled());
				T.print(T.time());
				break;
			}
			T.print(fe.get());
			//fe.get().print();
			T.print("After get!"+T.time());
			//T.exit();
			// System.out.println(fe.get());
			if (true) {
				throw new ExecutionException(new Throwable());
			}{
				throw new InterruptedException();
			}
		} catch (InterruptedException e) {
			System.out.println(e);
			return;
		} catch (ExecutionException e) {
			System.out.println(e);
		} finally {
			exec.shutdown();
		}

//		T.exit();
//		T.print("exit!");
		for (int i = 0; i < 1; i++) {
			// grp.go(qgb.text.Text.repeat(3, "12345"));

			T.sleep(444);
		}
		
					btnFind.setEnabled(false);
				CBInput.getEditor().selectAll();
				Word w=new Word();
				w.stW.set(CBInput.getEditor().getItem().toString());
				gRP.showWord(w);
				btnFind.setEnabled(true);
	JButton btnForward;
	JButton btnBack;
	JComboBox CBInput;
	JButton btnFind;
	//		btnBack = new JButton(R.Find.iconBack);
//		btnBack.setDisabledIcon(R.Find.iconBackDis);
//		//btnBack.setEnabled(false);
//
//		btnForward = new JButton(R.Find.iconForward);
//		btnForward.setDisabledIcon(R.Find.iconForwardDis);
//
//		btnFind = new JButton(R.Find.iconFind);
//		btnFind.setDisabledIcon(R.Find.iconFindDis);
	public void addPhon(StrNotNull sp, C ac) {
		
	}
	
	public void addVoice(Voice v, C ac) {
		
	}
	
	public WordPanel() {
		super(new MigLayout(R.MigL.sL_noBorder, "[grow]","[]0[]"));
		
		CreateComponents();
		AddListener();
		
		//add(CBInput,"growx");
		add(txtWord, R.MigL.sC_inputLine+",growx");
		//gsC_migl=R.MigL.sCHmin+",w 250:200:2000";
		gsC_migl="";
	}


		//T.msgbox();
//		while (gPlayer.isComplete()==false) {
//			T.msgbox(T.Thread());
////			try {
////				gPlayer.wait();
////			} catch (InterruptedException e) {
////				e.printStackTrace();
////			}
//			gPlayer.close();
//		}

			PrintStream ps=null;
			try {
				ps=new PrintStream(T.autoPath("/mh/ps.txt"), CharsetName.GST_UTF8);
			} catch (FileNotFoundException e2) {
				e2.printStackTrace();
			} catch (UnsupportedEncodingException e2) {
				e2.printStackTrace();
			}
//			try {
//				T.print(new String(str.getBytes(CharsetName.GST_UTF8),
//								   CharsetName.GST_UTF8));
//			} catch (UnsupportedEncodingException e1) {
//				e1.printStackTrace();
//			}
			//T.BytesToInputStream(ast_text.getBytes(ast_bytes))


	///////////////////////////
	public void initialize_sentence(int aiarry_size) {
		sentence=new Sentence[aiarry_size];
		for (int i = 0; i < sentence.length; i++) {
			sentence[i]=new Sentence();
		}
	}
	

public void print(){print(this);}
	public static void print(Entry entry) {
		if (entry==null) {
			return;
		}
		T.print("entry.word.st_w="+entry.word.st_w);
		T.print("entry.word.vUK.st_mark="+entry.word.vUK.st_mark);
		//T.print("entry.word.voice.bis_v==null:"+entry.word.voice.bis_v==null);
		T.print("entry.phonetic="+entry.phonetic);
		T.print("entry.translations="+entry.translations);
		if (entry.sentence==null) {
			T.print("entry.sentence=null");
		}else {
			for (int i = 0; i < entry.sentence.length; i++) {
				T.print("entry.sentence["+i+"].v.st_mark="+entry.sentence[i].v.st_mark);
				T.print("entry.sentence["+i+"].ds.st_e="+entry.sentence[i].ds.st_e);
				T.print("entry.sentence["+i+"].ds.st_c="+entry.sentence[i].ds.st_c);
			}
		}

	}


//					String str=yf[i].toString(),stn=yf[i].getName(),stia="";
//					str=str.substring(34, str.length());
//					int ia=str.lastIndexOf("$"),ib=str.indexOf(stn);
//					if (ia!=-1) {
//						stia=str.subSequence(0, ia)+".";
//					}
//					str=stia+astName+"."+
//							str.subSequence(ib, str.length());
//					T.print(str.length());
//					T.print("ia=%d,ib=%d,stn=%s,ast=%s",ia,ib,stn,astName);
//					T.msgbox(str);
					
	
			if (String.class==yf[i].getType()) {
				String sta = null;
				try {
					sta= (String) yf[i].get(ae);
				} catch (IllegalArgumentException e1) {
					e1.printStackTrace();
				} catch (IllegalAccessException e1) {
					e1.printStackTrace();
				}
				if (sta != null) {
					T.print("%s=\"%s\"",yf[i].toString(),sta);
				}
			}else {
				println(object);
			}


		try {
			argsError();
		} catch (Exception e) {
			e.printStackTrace();
			// System.err.println(e);
		}

		T.Thread(0);


public static void setComponentsColor(Color acolor,Object ao_instance) {
		/**设置对象本身的颜色**/
		setComponentColor(acolor, ao_instance);
		/**设置对象中所有组件的颜色**/
		Field[] yf = ao_instance.getClass().getDeclaredFields();
		for (int i = 0; i < yf.length; i++) {
			/**指示反射的对象在使用时应该取消 Java 语言访问检查**/
			yf[i].setAccessible(true);
			if (Component.class.isAssignableFrom(yf[i].getType())) {
				Component comp = null;
				try {
					T.print("2:"+yf[i].get(ao_instance).toString());
					comp= (Component) yf[i].get(ao_instance);
				} catch (IllegalArgumentException e1) {
					e1.printStackTrace();
				} catch (IllegalAccessException e1) {
					e1.printStackTrace();
				}
				if (comp != null) {
					comp.setBackground(acolor);
					/**如果组件为容器，则递归调用**/
					if (Container.class==yf[i].getType()){
						Container c=null;
						try {
							T.print( yf[i].get(ao_instance).toString());
							c=(Container) yf[i].get(ao_instance);
						} catch (IllegalArgumentException e) {
							e.printStackTrace();
						} catch (IllegalAccessException e) {
							e.printStackTrace();
						}
						if (c != null) {
							Component[] ycomp=c.getComponents();
							for (int j = 0; j < ycomp.length; j++) {
								T.print(ycomp[j].toString());
								//T.msgbox(ycomp[j].toString());
								setComponentsColor(acolor, ycomp[j]);
							}
						}
					}
				}

			}
		}
	}
	
	public static void print(int[] ai) {
		int im = ai.length;
		int ipm = String.valueOf(im).length() + 3;
		for (int i = 0; i < im; i++) {
			// int in=i;
			System.out.print(Text.pad("qgb" + (i), ipm) + ":");
			System.out.println(ai[i]);
			// print(ayoa[i] );

		}
	}

	//					f.getContentPane().add(new JButton("Test Jb"),"wrap");
//					for (int i = 0; i < 9; i++) {
//						f.getContentPane().add(new JButton("JB "+i));
//					}
	
		try {
			CBInput.setFont(Font.createFont(Font.TRUETYPE_FONT,
											T.read_bis(":res/FZMWFont.ttf")));
		} catch (FontFormatException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		//QField
		

		/*TableItem[] yti=new TableItem[9];
		for (int i = 0; i < yti.length; i++) {
			yti[i]=new TableItem(table,SWT.NONE); // 构造数据值对象 ( 行对象 )
			yti[i].setFont(SWTResourceManager.getFont("宋体", 13, SWT.BOLD | SWT.ITALIC));
			yti[i].setText(new String[]{Integer.toString(i),"12321312"}); // 填充数据项的值
		}*/
		//System.out.print("qgb button");
		
		(1,// 其中行的第一个单元格为 gridx=0。
				0,// 指定位于组件显示区域的顶部的单元格，其中最上边的单元格为 gridy=0。
				GridBagConstraints.REMAINDER,// 指定组件显示区域的某一行中的单元格数。
				1,// 指定在组件显示区域的一列中的单元格数
				0.0,// 指定如何分布额外的水平空间。
				0.0, GridBagConstraints.NORTHEAST, GridBagConstraints.NONE,// 当组件的显示区域大于它所请求的显示区域的大小时使用此字段。它可以确定是否调整组件大小，以及在需要的时候如何进行调整。
				Field.insets_btn,// 此字段指定组件的外部填充，即组件与其显示区域边缘之间间距的最小量。默认值为 new
									// Insets(0, 0, 0, 0)。
				-5,// 此字段指定组件的内部填充，即给组件的最小宽度添加多大的空间。组件的宽度至少为其最小宽度加上 ipadx 像素。
				-5);
				
				
				
						gbc = new GridBagConstraints(1,// gridx其中行的第一个单元格为 gridx=0。
				0,// gridy
				GridBagConstraints.REMAINDER,// gridwidth指定组件显示区域的某一行中的单元格数。
				1,// gridheight
				0.0,// weightx指定如何分布额外的水平空间。
				0.0,// weighty 
				GridBagConstraints.NORTHEAST,//anchor
				GridBagConstraints.NONE,// fill当组件的显示区域大于它所请求的显示区域的大小时使用此字段。它可以确定是否调整组件大小，以及在需要的时候如何进行调整。
				Field.INSETS_BTN,// Insets(0, 0, 0, 0)。此字段指定组件的外部填充，即组件与其显示区域边缘之间间距的最小量
				-5,// ipadx此字段指定组件的内部填充，即给组件的最小宽度添加多大的空间。组件的宽度至少为其最小宽度加上 ipadx 像素
				-5);// ipady
				
				

	public void println() {
		println(this);
		}
	public static void println(Object ae) {
		Field[] yf = ae.getClass().getDeclaredFields();
		for (int i = 0; i < yf.length; i++) {
			/**指示反射的对象在使用时应该取消 Java 语言访问检查**/
			yf[i].setAccessible(true);
			if (String.class==yf[i].getType()) {
				String sta = null;
				try {
					sta= (String) yf[i].get(ae);
				} catch (IllegalArgumentException e1) {
					e1.printStackTrace();
				} catch (IllegalAccessException e1) {
					e1.printStackTrace();
				}
				if (sta != null) {
					T.print("%s=\"%s\"",yf[i].toString(),sta);
				}
			}else {
				Object object = null;
				try {
					object=yf[i].get(ae);
				} catch (IllegalArgumentException e) {
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					e.printStackTrace();
				}
				if (object==null) {
					continue;
				}
				println(object);
			}
		}
	}